{"ast":null,"code":"var _jsxFileName = \"/mnt/d/Libraries/Documents/codeRepos/reactime/sandboxes/manual-tests/NextJS/Frontend/src/scenes/sandboxes/componentDidMount.js\";\nvar __jsx = React.createElement;\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { Component } from 'react';\nimport './styles.sass';\nimport { increaseCount } from '../../redux/actions/actions';\n\nclass ComponentDidMount extends Component {\n  constructor(props) {\n    super(props);\n\n    _defineProperty(this, \"increaseCount\", () => {\n      this.setState(prevState => ({\n        count: prevState.count + 1\n      }));\n    });\n\n    this.state = {\n      count: 0\n    };\n  }\n\n  componentDidMount() {\n    this.countInterval = setInterval(this.increaseCount, 100);\n  }\n\n  componentWillUnmount() {\n    clearInterval(this.countInterval);\n  }\n\n  render() {\n    const {\n      count\n    } = this.state;\n    return __jsx(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 30\n      },\n      __self: this\n    }, __jsx(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 31\n      },\n      __self: this\n    }, \"Count will automatically increase as setState is called at an interval\", ` ${count}`));\n  }\n\n}\n\nexport default ComponentDidMount;","map":{"version":3,"sources":["/mnt/d/Libraries/Documents/codeRepos/reactime/sandboxes/manual-tests/NextJS/Frontend/src/scenes/sandboxes/componentDidMount.js"],"names":["React","Component","increaseCount","ComponentDidMount","constructor","props","setState","prevState","count","state","componentDidMount","countInterval","setInterval","componentWillUnmount","clearInterval","render"],"mappings":";;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAO,eAAP;AACA,SAASC,aAAT,QAA8B,6BAA9B;;AAEA,MAAMC,iBAAN,SAAgCF,SAAhC,CAA0C;AACxCG,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACjB,UAAMA,KAAN;;AADiB,2CAgBH,MAAM;AACpB,WAAKC,QAAL,CAAcC,SAAS,KAAK;AAAEC,QAAAA,KAAK,EAAED,SAAS,CAACC,KAAV,GAAkB;AAA3B,OAAL,CAAvB;AACD,KAlBkB;;AAGjB,SAAKC,KAAL,GAAa;AACXD,MAAAA,KAAK,EAAE;AADI,KAAb;AAGD;;AAEDE,EAAAA,iBAAiB,GAAG;AAClB,SAAKC,aAAL,GAAqBC,WAAW,CAAC,KAAKV,aAAN,EAAqB,GAArB,CAAhC;AACD;;AAEDW,EAAAA,oBAAoB,GAAG;AACrBC,IAAAA,aAAa,CAAC,KAAKH,aAAN,CAAb;AACD;;AAMDI,EAAAA,MAAM,GAAG;AACP,UAAM;AAAEP,MAAAA;AAAF,QAAY,KAAKC,KAAvB;AAEA,WACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iFAEI,IAAGD,KAAM,EAFb,CADF,CADF;AAQD;;AAhCuC;;AAkC1C,eAAeL,iBAAf","sourcesContent":["import React, { Component } from 'react';\nimport './styles.sass';\nimport { increaseCount } from '../../redux/actions/actions';\n\nclass ComponentDidMount extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      count: 0\n    };\n  }\n\n  componentDidMount() {\n    this.countInterval = setInterval(this.increaseCount, 100);\n  }\n\n  componentWillUnmount() {\n    clearInterval(this.countInterval);\n  }\n\n  increaseCount = () => {\n    this.setState(prevState => ({ count: prevState.count + 1 }));\n  };\n\n  render() {\n    const { count } = this.state;\n\n    return (\n      <div>\n        <div>\n          Count will automatically increase as setState is called at an interval\n          {` ${count}`}\n        </div>\n      </div>\n    );\n  }\n}\nexport default ComponentDidMount;\n"]},"metadata":{},"sourceType":"module"}