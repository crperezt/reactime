{"ast":null,"code":"var _jsxFileName = \"/mnt/d/Libraries/Documents/codeRepos/reactime/sandboxes/manual-tests/NextJS/Frontend/src/scenes/sandboxes/useEffectAndState.js\";\nvar __jsx = React.createElement;\nimport React, { useEffect, useState } from 'react'; // import { connect } from 'react-redux';\n\nimport UseStateChild from './useStateChild';\nimport './styles.sass'; // import * as actions from '../redux/actions/actions';\n// const mapStateToProps = state => ({});\n// const mapDispatchToProps = dispatch => ({});\n\nconst UseEffectAndState = () => {\n  const {\n    0: count,\n    1: setCount\n  } = useState(0);\n  const {\n    0: intervalCount,\n    1: setIntervalCount\n  } = useState(0);\n  const {\n    0: buttonCount,\n    1: setButtonCount\n  } = useState(0);\n  const {\n    0: effectCount,\n    1: setEffectCount\n  } = useState(0);\n  useEffect(() => {\n    const effectInterval = setInterval(() => setCount(prevCount => prevCount + 1), 50);\n    if (intervalCount === 20) clearInterval(effectInterval);\n    return () => clearInterval(effectInterval);\n  }, [intervalCount]);\n  useEffect(() => {\n    if (count % 10 === 0) setIntervalCount(prevCount => prevCount + 1);\n  }, [count]);\n  useEffect(() => {\n    if (!(buttonCount % 2)) setEffectCount(lastCount => lastCount + 1);\n  }, [buttonCount]);\n  return __jsx(React.Fragment, null, `${count}. This next number increments at each interval of 10 and stops both counters once its value reaches 20 => ${intervalCount}`, __jsx(\"div\", {\n    className: \"mt-5\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 39\n    },\n    __self: this\n  }, \"Button Count\", buttonCount), __jsx(\"button\", {\n    type: \"button\",\n    className: \"mt-3\",\n    onClick: () => setButtonCount(buttonCountVal => buttonCountVal + 1),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44\n    },\n    __self: this\n  }, \"Click Here to Increase the State Count Directly Above\"), __jsx(\"div\", {\n    className: \"mt-3 mb-5\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52\n    },\n    __self: this\n  }, \"Effect Count Should Increase When Button Count is Even:\", effectCount), __jsx(UseStateChild, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57\n    },\n    __self: this\n  }));\n};\n\nexport default UseEffectAndState; // export default connect(mapStateToProps, mapDispatchToProps)(Scenes);","map":{"version":3,"sources":["/mnt/d/Libraries/Documents/codeRepos/reactime/sandboxes/manual-tests/NextJS/Frontend/src/scenes/sandboxes/useEffectAndState.js"],"names":["React","useEffect","useState","UseStateChild","UseEffectAndState","count","setCount","intervalCount","setIntervalCount","buttonCount","setButtonCount","effectCount","setEffectCount","effectInterval","setInterval","prevCount","clearInterval","lastCount","buttonCountVal"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C,C,CACA;;AACA,OAAOC,aAAP,MAA0B,iBAA1B;AACA,OAAO,eAAP,C,CAEA;AACA;AACA;;AAEA,MAAMC,iBAAiB,GAAG,MAAM;AAC9B,QAAM;AAAA,OAACC,KAAD;AAAA,OAAQC;AAAR,MAAoBJ,QAAQ,CAAC,CAAD,CAAlC;AACA,QAAM;AAAA,OAACK,aAAD;AAAA,OAAgBC;AAAhB,MAAoCN,QAAQ,CAAC,CAAD,CAAlD;AACA,QAAM;AAAA,OAACO,WAAD;AAAA,OAAcC;AAAd,MAAgCR,QAAQ,CAAC,CAAD,CAA9C;AACA,QAAM;AAAA,OAACS,WAAD;AAAA,OAAcC;AAAd,MAAgCV,QAAQ,CAAC,CAAD,CAA9C;AAEAD,EAAAA,SAAS,CAAC,MAAM;AACd,UAAMY,cAAc,GAAGC,WAAW,CAChC,MAAMR,QAAQ,CAACS,SAAS,IAAIA,SAAS,GAAG,CAA1B,CADkB,EAEhC,EAFgC,CAAlC;AAKA,QAAIR,aAAa,KAAK,EAAtB,EAA0BS,aAAa,CAACH,cAAD,CAAb;AAE1B,WAAO,MAAMG,aAAa,CAACH,cAAD,CAA1B;AACD,GATQ,EASN,CAACN,aAAD,CATM,CAAT;AAWAN,EAAAA,SAAS,CAAC,MAAM;AACd,QAAII,KAAK,GAAG,EAAR,KAAe,CAAnB,EAAsBG,gBAAgB,CAACO,SAAS,IAAIA,SAAS,GAAG,CAA1B,CAAhB;AACvB,GAFQ,EAEN,CAACV,KAAD,CAFM,CAAT;AAIAJ,EAAAA,SAAS,CAAC,MAAM;AACd,QAAI,EAAEQ,WAAW,GAAG,CAAhB,CAAJ,EAAwBG,cAAc,CAACK,SAAS,IAAIA,SAAS,GAAG,CAA1B,CAAd;AACzB,GAFQ,EAEN,CAACR,WAAD,CAFM,CAAT;AAIA,SACE,4BACI,GAAEJ,KAAM,6GAA4GE,aAAc,EADtI,EAGE;AAAK,IAAA,SAAS,EAAC,MAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBAEGE,WAFH,CAHF,EAQE;AACE,IAAA,IAAI,EAAC,QADP;AAEE,IAAA,SAAS,EAAC,MAFZ;AAGE,IAAA,OAAO,EAAE,MAAMC,cAAc,CAACQ,cAAc,IAAIA,cAAc,GAAG,CAApC,CAH/B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,6DARF,EAgBE;AAAK,IAAA,SAAS,EAAC,WAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gEAEGP,WAFH,CAhBF,EAqBE,MAAC,aAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IArBF,CADF;AAyBD,CAlDD;;AAoDA,eAAeP,iBAAf,C,CACA","sourcesContent":["import React, { useEffect, useState } from 'react';\n// import { connect } from 'react-redux';\nimport UseStateChild from './useStateChild';\nimport './styles.sass';\n\n// import * as actions from '../redux/actions/actions';\n// const mapStateToProps = state => ({});\n// const mapDispatchToProps = dispatch => ({});\n\nconst UseEffectAndState = () => {\n  const [count, setCount] = useState(0);\n  const [intervalCount, setIntervalCount] = useState(0);\n  const [buttonCount, setButtonCount] = useState(0);\n  const [effectCount, setEffectCount] = useState(0);\n\n  useEffect(() => {\n    const effectInterval = setInterval(\n      () => setCount(prevCount => prevCount + 1),\n      50\n    );\n\n    if (intervalCount === 20) clearInterval(effectInterval);\n\n    return () => clearInterval(effectInterval);\n  }, [intervalCount]);\n\n  useEffect(() => {\n    if (count % 10 === 0) setIntervalCount(prevCount => prevCount + 1);\n  }, [count]);\n\n  useEffect(() => {\n    if (!(buttonCount % 2)) setEffectCount(lastCount => lastCount + 1);\n  }, [buttonCount]);\n\n  return (\n    <>\n      {`${count}. This next number increments at each interval of 10 and stops both counters once its value reaches 20 => ${intervalCount}`}\n\n      <div className=\"mt-5\">\n        Button Count\n        {buttonCount}\n      </div>\n\n      <button\n        type=\"button\"\n        className=\"mt-3\"\n        onClick={() => setButtonCount(buttonCountVal => buttonCountVal + 1)}\n      >\n        Click Here to Increase the State Count Directly Above\n      </button>\n\n      <div className=\"mt-3 mb-5\">\n        Effect Count Should Increase When Button Count is Even:\n        {effectCount}\n      </div>\n\n      <UseStateChild />\n    </>\n  );\n};\n\nexport default UseEffectAndState;\n// export default connect(mapStateToProps, mapDispatchToProps)(Scenes);\n"]},"metadata":{},"sourceType":"module"}