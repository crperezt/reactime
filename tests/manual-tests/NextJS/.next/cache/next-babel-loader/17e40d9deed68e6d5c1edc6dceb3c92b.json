{"ast":null,"code":"import _Object$defineProperty from \"@babel/runtime-corejs2/core-js/object/define-property\";\nimport _Object$defineProperties from \"@babel/runtime-corejs2/core-js/object/define-properties\";\nimport _Object$getOwnPropertyDescriptors from \"@babel/runtime-corejs2/core-js/object/get-own-property-descriptors\";\nimport _Object$getOwnPropertyDescriptor from \"@babel/runtime-corejs2/core-js/object/get-own-property-descriptor\";\nimport _Object$getOwnPropertySymbols from \"@babel/runtime-corejs2/core-js/object/get-own-property-symbols\";\nimport _Object$keys from \"@babel/runtime-corejs2/core-js/object/keys\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = _Object$keys(object); if (_Object$getOwnPropertySymbols) { var symbols = _Object$getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return _Object$getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (_Object$getOwnPropertyDescriptors) { _Object$defineProperties(target, _Object$getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { _Object$defineProperty(target, key, _Object$getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport * as types from '../actions/actionTypes';\nvar initialState = {\n  count: 0\n};\n\nvar coreReducer = function coreReducer() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n  var count;\n\n  switch (action.type) {\n    case types.INCREASE_COUNT:\n      {\n        count = state.count + 1;\n        return _objectSpread({}, state, {\n          count: count\n        });\n      }\n\n    default:\n      return state;\n  }\n};\n\nexport default coreReducer;","map":{"version":3,"sources":["/mnt/d/Libraries/Documents/codeRepos/reactime/sandboxes/manual-tests/NextJS/Frontend/src/redux/reducers/coreReducer.js"],"names":["types","initialState","count","coreReducer","state","action","type","INCREASE_COUNT"],"mappings":";;;;;;;;;;;;AAAA,OAAO,KAAKA,KAAZ,MAAuB,wBAAvB;AAEA,IAAMC,YAAY,GAAG;AACnBC,EAAAA,KAAK,EAAE;AADY,CAArB;;AAIA,IAAMC,WAAW,GAAG,SAAdA,WAAc,GAAkC;AAAA,MAAjCC,KAAiC,uEAAzBH,YAAyB;AAAA,MAAXI,MAAW;AACpD,MAAIH,KAAJ;;AAEA,UAAQG,MAAM,CAACC,IAAf;AACE,SAAKN,KAAK,CAACO,cAAX;AAA2B;AACzBL,QAAAA,KAAK,GAAGE,KAAK,CAACF,KAAN,GAAc,CAAtB;AAEA,iCACKE,KADL;AAEEF,UAAAA,KAAK,EAALA;AAFF;AAID;;AAED;AACE,aAAOE,KAAP;AAXJ;AAaD,CAhBD;;AAkBA,eAAeD,WAAf","sourcesContent":["import * as types from '../actions/actionTypes';\n\nconst initialState = {\n  count: 0\n};\n\nconst coreReducer = (state = initialState, action) => {\n  let count;\n\n  switch (action.type) {\n    case types.INCREASE_COUNT: {\n      count = state.count + 1;\n\n      return {\n        ...state,\n        count\n      };\n    }\n\n    default:\n      return state;\n  }\n};\n\nexport default coreReducer;\n"]},"metadata":{},"sourceType":"module"}