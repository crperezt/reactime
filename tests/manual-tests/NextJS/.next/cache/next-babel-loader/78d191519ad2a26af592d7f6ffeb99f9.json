{"ast":null,"code":"var __jsx = React.createElement;\nimport React, { useState } from 'react';\nimport { Provider } from 'react-redux';\nimport store from '../redux/store'; // import { connect } from 'react-redux';\n\nimport './styles.sass';\nimport UseState from './sandboxes/useState';\nimport UseEffect from './sandboxes/useEffect';\nimport UseContext from './sandboxes/useContext';\nimport UseMemo from './sandboxes/useMemo';\nimport Redux from './sandboxes/redux';\nimport Router from './sandboxes/router';\nimport SetState from './sandboxes/setState';\nimport ComponentDidMount from './sandboxes/componentDidMount';\nimport AppContextProvider from '../context/appContextProvider'; // import * as actions from '../redux/actions/actions';\n// const mapStateToProps = state => ({});\n// const mapDispatchToProps = dispatch => ({});\n\nconst Scenes = () => {\n  const {\n    0: activeSandbox,\n    1: setActiveSandbox\n  } = useState('UseState');\n\n  function changeSandbox(e) {\n    const {\n      innerText\n    } = e.target;\n    setActiveSandbox(innerText);\n  }\n\n  function sandboxButtons() {\n    const buttonsArray = ['UseState', 'UseEffect', 'UseContext', 'UseMemo', '|', 'Redux', 'Router', '|', 'SetState', 'ComponentDidMount'];\n    const buttons = buttonsArray.map((buttonName, index) => {\n      if (buttonName === '|') {\n        return __jsx(\"div\", {\n          key: buttonName + index\n        }, buttonName);\n      }\n\n      return __jsx(\"button\", {\n        key: buttonName + index,\n        type: \"button\",\n        onClick: changeSandbox,\n        style: activeSandbox === buttonName ? {\n          outline: 'none',\n          backgroundColor: 'cornflowerblue'\n        } : null\n      }, buttonName);\n    });\n    return __jsx(React.Fragment, null, buttons);\n  }\n\n  function displaySandbox() {\n    switch (activeSandbox) {\n      case 'UseState':\n        return __jsx(UseState, null);\n\n      case 'UseEffect':\n        return __jsx(UseEffect, null);\n\n      case 'UseContext':\n        return __jsx(AppContextProvider, null, __jsx(UseContext, null));\n\n      case 'UseMemo':\n        return __jsx(UseMemo, null);\n\n      case 'Redux':\n        return __jsx(Provider, {\n          store: store\n        }, __jsx(Redux, null));\n\n      case 'Router':\n        return __jsx(Router, null);\n\n      case 'SetState':\n        return __jsx(SetState, null);\n\n      case 'ComponentDidMount':\n        return __jsx(ComponentDidMount, null);\n\n      default:\n        return __jsx(UseState, null);\n    }\n  }\n\n  return __jsx(\"div\", {\n    className: \"container-fluid\"\n  }, __jsx(\"div\", {\n    className: \"row\"\n  }, __jsx(\"div\", {\n    className: \"col d-flex justify-content-around m-3\"\n  }, sandboxButtons())), __jsx(\"div\", {\n    className: \"row\"\n  }, __jsx(\"div\", {\n    className: \"col text-white bg-secondary text-center font-weight-bold p-1\"\n  }, \"Sandbox Below\")), __jsx(\"div\", {\n    className: \"row\"\n  }, __jsx(\"div\", {\n    className: \"col m-5 justify-content-center\"\n  }, displaySandbox())));\n};\n\nexport default Scenes; // export default connect(mapStateToProps, mapDispatchToProps)(Scenes);","map":null,"metadata":{},"sourceType":"module"}